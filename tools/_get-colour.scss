///
/// The function used to fetch valid colour values from the $palletes and $palette-default data maps. Function
/// location is currently in `settings/_colours.scss` as other settings files require this function, it throws
/// a error due to late declaration.
///
/// @name       getColour
/// @group      tools
/// @param      {string} $palette - A reference to an available palette (colour) in $palletes or $palette-default.
/// @param      {string} $tone [base] - A reference to an available tone within a selected palette.
/// @require    {variable} palette-merged
/// @return     {string} colour value (HEX, RGB)
///
/// @example
///     color: getColour('grey', 'light');
///     color: getColour('blue');
///
@function getColour($palette, $tone: 'base') {
    @if map-has-key($palette-merged, $palette) {
        @if map-has-key(map-get($palette-merged, $palette), $tone) {
            @return map-get(map-get($palette-merged, $palette), $tone);
        } @else {
            @warn "Palette '#{$palette}' does not contain '#{$tone}' to";
        }

    } @else {
        @warn "Palette '#{$palette}' does not exist";
    }
}

///
/// An alias of getColour with the american spelling because we all make mistakes...
///
/// @name       getColor
/// @group      tools
/// @see        getColour
///
@function getColor($palette, $tone: 'base') {
    @return getColour($palette, $tone);
}

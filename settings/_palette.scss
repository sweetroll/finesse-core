///
/// An initialisation of the array where application specific colours should be declared. Can be used
/// also to override default colours declared in $palette-default.
///
/// @name palette
/// @type Map
/// @prop {Map} pallette - A named colour palette to house different tones of said palette
/// @prop {String} pallette.tone [Colour] - A key-value pair to describe the tone of the parent palette
///       and supply the valid colour value.
/// @example
///     $palette: (
///         'grey': (
///             'base': #999,
///             'light': lighten(#999, 25%),
///             'dark': darken(#999, 25%)
///         ),
///         'red': (
///             'base': #F00
///         ),
///     );
///
$palette: () !default;

///
/// A handful of default colours used to decorate our base components and objects.
///
/// @name   palette-default
/// @access private
/// @see    palette
///
$palette-default: (
    'grey': (
        'light': #EEEEEE,
        'base': #999999,
        'dark': #333333
    ),
    'black': (
        'base': #000000
    ),
    'white': (
        'base': #FFFFFF
    ),
    'blue': (
        'base': #477DCA
    ),
    'green': (
        'base': #5CB85A
    ),
    'yellow': (
        'base': #F0AD4E
    ),
    'red': (
        'base': #D9534F
    )
);

///
/// A variable to house the merged arrays of $palette and $palette-default.
/// Why two arrays you ask? It allows the default colours provided by finesse to be *optionally*
/// overwritten. Using one array would result in having to respecify the defaults if any new
/// colours were to be added for the application.
///
/// @name       palette-merged
/// @access     private
/// @require    {variable} palette-default
/// @require    {variable} palette
///
$palette-merged: map-merge($palette-default, $palette);
